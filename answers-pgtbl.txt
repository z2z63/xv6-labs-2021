# Which other xv6 system call(s) could be made faster using this shared page? Explain how.
共享页面对用户程序是只读的，用户态与内核态的交互中，只有内核单方向用户程序传输数据时，才能使用这个共享页面
共享页面能够加快系统调用，我认为原因有两点
1. 避免用户态与内核态的状态切换开销
trampoline处的代码做的事主要就是切换页表，保存或恢复寄存器，跳转到内核的系统调入口或用户态系统调用的返回处。
    切换页表造成的开销：
        1. 切换页表造成了TLB全部失效
        2. 切换页表后，还需要通知其他核心
    保存或恢复寄存器造成的开销：
        1. 造成栈帧读写操作。risc-v的通用寄存器比较多，开销更大
    跳转造成的开销：
        1. 破坏了程序运行的局部性，导致cache失效
        2. 影响了流水线。假设五级流水线，可能只需要增加一个延迟槽。流水线更深后，可能需要暂停流水线。（跳转太远，分支预测无法起作用）
2. 避免复制拷贝造成的开销
    例如执行read系统调用时，内核维护一个缓冲区，用户程序也维护一个缓冲区，内核读取文件（或者从网卡上取数据等外设操作），
    复制到自己的缓冲区，再复制到用户的缓冲区。造成了两次复制。
    如果内核直接从外设上取走数据，复制到共享页面，就能减少一次复制。
可以看出，sysinfo,fstat,read都能利用这个共享页面以加速



# Explain the output of vmprint in terms of Fig 3-4 from the text. What does page 0 contain? What is in page 2?
When running in user mode, could the process read/write the memory mapped by page 1? What does the third to last
page contain?
    ```
    page table 0x0000000087f6e000
     ..0: pte 0x0000000021fda801 pa 0x0000000087f6a000
     .. ..0: pte 0x0000000021fda401 pa 0x0000000087f69000
     .. .. ..0: pte 0x0000000021fdac1f pa 0x0000000087f6b000
     .. .. ..1: pte 0x0000000021fda00f pa 0x0000000087f68000
     .. .. ..2: pte 0x0000000021fd9c1f pa 0x0000000087f67000
     ..255: pte 0x0000000021fdb401 pa 0x0000000087f6d000
     .. ..511: pte 0x0000000021fdb001 pa 0x0000000087f6c000
     .. .. ..509: pte 0x0000000021fdd813 pa 0x0000000087f76000
     .. .. ..510: pte 0x0000000021fddc07 pa 0x0000000087f77000
     .. .. ..511: pte 0x0000000020001c0b pa 0x0000000080007000
     ```

首先，vmprint打印的是init进程的页表，所以这个页表是用户态的页表
第0页，根据它在三级页表中的索引，可以得出它的虚拟地址为0（index字段全零，offset字段全零），根据xv6的进程内存布局，或者exec函数中的代码，
可以知道第0页存放的是代码和数据（text,data)，随后，内核又分配了两页给init，第2页是用户进程的栈
不可以读写第1页，因为这个页表项在建立时就清除了PTE_U这个bit，表示禁止用户态访问，这是为了捕捉栈溢出，因为栈的生长方向是低地址方向
示意图如下
                --------0x3000
                stack
                --------0x2000
                guard
                --------0x1000
                text,data
                --------0x0

根据计算，倒数第3页的虚拟地址为(255<<(9+9+12))+(511<<(9+12))+(509<<12) = 0x3fffffd000，也就是用户地址空间中地址从高到低第3页。
根据xv6的进程内存布局，这个页就是在实验中实现的usys页面，即用户和内核共享的一个页面。目前，这个页面只存放了当前进程的pid
示意图如下
                --------MAXVA
                trampoline
                --------MAXVA-PGSIZE
                trapframe
                --------MAXVA-2*PGSIZE
                usys
                --------MAXVA-3*PGSIZE